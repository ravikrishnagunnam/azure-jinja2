{% import 'azure-jinja2/macros/storage_account.json.j2' as storage_account %}
{% import 'azure-jinja2/macros/network_interface.json.j2' as network_interface %}
{% import 'azure-jinja2/macros/virtual_machine.json.j2' as virtual_machine %}

{#
   package: quick_virtual_machine
   source: https://github.com/sebbrochet/azure-jinja2/blob/master/macros/quck_virtual_machine.json.j2

   macro: from_vars
   Create a new *virtual machine* with a dedicated *storage account* (see <storage_account>) and *network interface* (see <network_interface>).

   Parameters:

      name - string
      withSSHKey - string = "false", set to "true" to use *sshKeyData* parameters
      sshKeyData - string = "[variables('sshKeyData')]", public key to authenticate (ssh-rsa xxxx...xxx form)
      sshKeyPath - string = "[variables('sshKeyPath')]"
      withPublicIP - string = "false", set to "true" to use *publicIPAddressName* parameter
      publicIPAddressName - string = "variables('publicIPAddressName')"
      withNSG - string = "false", set to "true" to use *networkSecurityGroupName* parameter
      networkSecurityGroupName - string = "variables('networkSecurityGroupName')"

Example:
(start code)

{% import 'azure-jinja2/macros/virtual_network.json.j2' as virtual_network %}
{% import 'azure-jinja2/macros/public_ip_address.json.j2' as public_ip_address %}
{% import 'azure-jinja2/macros/quick_virtual_machine.json.j2' as quick_virtual_machine %}
{% import 'azure-jinja2/macros/security_rules.json.j2' as security_rules %}
{% import 'azure-jinja2/macros/network_security_group.json.j2' as network_security_group %}

    ...
   "resources" : [
      {{ virtual_network.from_vars() }},
      {{ public_ip_address.from_vars(withDNS = "true") }},

      {% set jumbox_security_rules %}
      [ {{ security_rules.SSH() }}, {{ security_rules.HTTPS() }} ]
      {% endset %}
      {{ network_security_group.from_vars(securityRules = jumbox_security_rules) }},

      {{ quick_virtual_machine.from_vars('jumpbox', withPublicIP = "true", withSSHKey = "true", withNSG = "true") }}
   ]

(end)

#}

{% macro from_vars(
     name,
     withSSHKey               = "false",
     sshKeyData               = "[variables('sshKeyData')]",
     sshKeyPath               = "[variables('sshKeyPath')]",
     withPublicIP             = "false",
     publicIPAddressName      = "variables('publicIPAddressName')",
     withNSG                  = "false",
     networkSecurityGroupName = "variables('networkSecurityGroupName')"
  )
%}
     {% set sa_name %}[concat(uniqueString(resourceGroup().id), 'sac{{ name }}')]{% endset %}
     {{ storage_account.from_vars(name = sa_name) }}
     ,
     {% set nic_name %}nic{{ name }}{% endset %}
     {{ network_interface.from_vars(
           name = nic_name,
           withPublicIP = withPublicIP,
	   publicIPAddressName = publicIPAddressName,
           withNSG = withNSG,
	   networkSecurityGroupName = networkSecurityGroupName
        )
     }}
     ,
     {% set sa_name_ref %}concat(uniqueString(resourceGroup().id), 'sac{{ name }}'){% endset %}
     {% set nic_name_ref %}'nic{{ name }}'{% endset %}
     {% set vm_name %}vm{{ name }}{% endset %}
     {{ virtual_machine.from_vars(
           name = vm_name,
           storageAccountName = sa_name_ref,
           nicName = nic_name_ref,
	   withSSHKey = withSSHKey,
	   sshKeyData = sshKeyData,
	   sshKeyPath = sshKeyPath
        )
     }}
{%- endmacro %}
