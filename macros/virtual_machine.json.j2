{#
   package: virtual_machine
   source: https://github.com/sebbrochet/azure-jinja2/blob/master/macros/virtual_machine.json.j2

   macro: create
   Create a new *virtual machine*.

   Parameters:

      name - string
      apiVersion - string
      location - string
      storageAccountName - string
      nicName - string, name of an existing *network interface* (see <network_interface>)
      hardware_profile - object, "*hardware profile* (see <virtual_machine/hardware_profile>)
      os_profile - object, *os profile* (see <virtual_machine/os_profile>)
      storage_profile - object, *storage profile* (see <virtual_machine/storage_profile>)
      network_profile - object, *network_profile* (see <virtual_machine/network_profile>) 
      diagnostics_profile - object, *diagnostics profile* (see <virtual_machine/diagnostics_profile>)
      extensions - array, list of *virtual machine extension* to add to the VM (see <virtual_machine_extension>)

Example:
(start code)
{% import 'azure-jinja2/macros/network_interface.json.j2' as virtual_machine %}

{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "variables": {
    ...
  },
  "resources" : [
    ...,
    {{ virtual_machine.create(
          name = "myVM",
          apiVersion = "2015-06-15",
          location = "westeurope",
          ...
       )
    }}
  ]
}

(end)

#}

{% macro create
(
   name,
   apiVersion,
   location,
   storageAccountName,
   nicName,
   hardware_profile,
   os_profile,
   storage_profile,
   network_profile,
   diagnostics_profile,
   extensions
)
-%}
{
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "{{ apiVersion }}",
      "name": "{{ name }}",
      "location": "{{ location }}",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',{{ storageAccountName }})]",
        "[concat('Microsoft.Network/networkInterfaces/',{{ nicName }})]"
      ],
      "properties": {
        "hardwareProfile": {{ hardware_profile }},
        "osProfile": {{ os_profile }},
        "storageProfile": {{ storage_profile }},
        "networkProfile":{{ network_profile }} 
	{% if diagnostics_profile %}
	,
        "diagnosticsProfile": {{ diagnostics_profile }}
	{% endif %}
      }
      {% if extensions %}
      ,
      "resources" : {{ extensions }}
      {% endif %}
}
{%- endmacro %}

{#
   macro: from_vars
   Create a new *virtual machine* from variables.

   Parameters:

      name - string
      apiVersion - string
      location - string
      storageAccountName - string
      vmStorageAccountContainerName - string
      nicName - string
      vmSize - string
      adminUsername - string
      adminPassword - string
      withSSHKey - string
      sshKeyData - string
      sshKeyPath - string
      imagePublisher - string
      imageOffer - string
      OSVersion - string
      version - string
      OSDiskName - string
      withDataDisk - string
      sizeOfDiskInGB - string
      dataDisk1VhdName - string
      extension - object
      withDiagnosticsProfile - string

Example:
(start code)
{% import 'azure-jinja2/macros/virtual_machine.json.j2' as virtual_machine %}

{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "variables": {
    ...
  },
  "resources" : [
    ...,
    {{ virtual_machine.from_vars() }}
  ]
}

#}

{% macro from_vars(
      name                          = "[variables('vmName')]",
      apiVersion                    = "[variables('apiVersion')]",
      location                      = "[variables('location')]",
      storageAccountName            = "variables('storageAccountName')",
      vmStorageAccountContainerName = "variables('vmStorageAccountContainerName')",
      nicName                       = "variables('nicName')",
      vmSize                        = "[variables('vmSize')]",
      adminUsername                 = "[variables('adminUsername')]",
      adminPassword                 = "[variables('adminPassword')]",
      withSSHKey                    = "false",
      sshKeyData                    = "[variables('sshKeyData')]",
      sshKeyPath                    = "[variables('sshKeyPath')]",
      imagePublisher                = "[variables('imagePublisher')]",
      imageOffer                    = "[variables('imageOffer')]",
      OSVersion                     = "[variables('OSVersion')]",
      version                       = "latest",
      OSDiskName                    = "variables('OSDiskName')",
      withDataDisk                  = "true",
      sizeOfDiskInGB                = "[variables('sizeOfDiskInGB')]",
      dataDisk1VhdName              = "variables('dataDisk1VhdName')",
      extension                     = "",
      withDiagnosticsProfile        = "true"
)
-%}
{% import 'azure-jinja2/macros/virtual_machine/hardware_profile.json.j2' as vm_hw_profile %}
{% set _hardware_profile %}
{{ vm_hw_profile.create(vmSize = vmSize)}}
{% endset %}

{% import 'azure-jinja2/macros/virtual_machine/os_profile.json.j2' as vm_os_profile %}

{% if withSSHKey != "false" %}
{% set _sshKeyData %}{{ sshKeyData }}{% endset %}
{% set _sshKeyPath %}{{ sshKeyPath }}{% endset %}
{% else %}
{% set _sshKeyData %}{% endset %}
{% set _sshKeyPath %}{% endset %}
{% endif %}

{% set _os_profile %}
{{ vm_os_profile.create(
      name = name,
      adminUsername = adminUsername,
      adminPassword = adminPassword,
      sshKeyData = _sshKeyData,
      sshKeyPath = _sshKeyPath
   )
}}
{% endset %}

{% if withDataDisk == "true" %}
{% import 'azure-jinja2/macros/virtual_machine/data_disk.json.j2' as vm_data_disk %}

{% set _dataDisks %}
[
   {{ vm_data_disk.create(
         name = "datadisk1",
         storageAccountName = storageAccountName,
         vmStorageAccountContainerName = vmStorageAccountContainerName,
         sizeOfDiskInGB = sizeOfDiskInGB,
         dataDiskVhdName = dataDisk1VhdName
      )
   }}
]
{% endset %}
{% else %}
{% set _dataDisks %}{% endset %}
{% endif %}


{% import 'azure-jinja2/macros/virtual_machine/storage_profile.json.j2' as vm_storage_profile %}

{% set _storage_profile %}
{{ vm_storage_profile.create(
      storageAccountName = storageAccountName,
      vmStorageAccountContainerName = vmStorageAccountContainerName,
      imagePublisher = imagePublisher,
      imageOffer= imageOffer,
      OSVersion = OSVersion,
      version = version,
      OSDiskName = OSDiskName,
      dataDisks = _dataDisks
   )
}}
{% endset %}

{% import 'azure-jinja2/macros/virtual_machine/network_profile.json.j2' as vm_network_profile %}

{% set _network_profile %}
{{ vm_network_profile.create(
      nicName = nicName
   )
}}
{% endset %}

{% import 'azure-jinja2/macros/virtual_machine/diagnostics_profile.json.j2' as vm_diag_profile %}

{% if withDiagnosticsProfile == "true" %}
{% set _diagnostics_profile %}{{ vm_diag_profile.create(storageAccountName = storageAccountName) }}{% endset %}
{% else %}
{% set _diagnostics_profile %}{% endset %}
{% endif %}
 
{% if extension %}
{% set _extensions %}
[
   {{ extension }}
]
{% endset %}
{% else %}
{% set _extensions %}{% endset %}
{% endif %}

{{ create(
      name                = name,
      apiVersion          = apiVersion,
      location            = location,
      storageAccountName  = storageAccountName,
      nicName             = nicName,
      hardware_profile    = _hardware_profile,
      os_profile          = _os_profile,
      storage_profile     = _storage_profile,
      network_profile     = _network_profile,
      extensions          = _extensions,
      diagnostics_profile = _diagnostics_profile
   )
}}
{%- endmacro %}
