{#
   package: virtual_machine
   source: https://github.com/sebbrochet/azure-jinja2/blob/master/macros/virtual_machine.json.j2

   macro: create
   Create a new *virtual machine*.

   Parameters:

      name - string
      apiVersion - string
      location - string
      storageAccountName - string
      vmStorageAccountContainerName - string, name of an existing *storage account* (see <storage_account>)
      nicName - string, name of an existing *network interface* (see <network_interface>)
      vmSize - string
      adminUsername - string
      adminPassword - string
      withSSHKey - string
      sshKeyData - string
      sshKeyPath - string
      imagePublisher - string
      imageOffer - string
      OSVersion - string
      version - string
      OSDiskName - string
      dataDisks - array, list of data disk configurations
      extensions - array, list of *virtual machine extension* to add to the VM (see <virtual_machine_extension>)
      withDiagnosticsProfile - string, set to "true" to add the *Diagnostics Profile* to the VM
      customData - string (optional), base64-encoded custom data for the OS Profile

Example:
(start code)
{% import 'azure-jinja2/macros/network_interface.json.j2' as virtual_machine %}

{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "variables": {
    ...
  },
  "resources" : [
    ...,
    {{ virtual_machine.create(
          name = "myVM",
          apiVersion = "2015-06-15",
          location = "westeurope",
          ...
       )
    }}
  ]
}

(end)

#}

{% macro create
(
   name,
   apiVersion,
   location,
   storageAccountName,
   vmStorageAccountContainerName,
   nicName,
   vmSize,
   adminUsername,
   adminPassword,
   withSSHKey,
   sshKeyData,
   sshKeyPath,
   imagePublisher,
   imageOffer,
   OSVersion,
   version,
   OSDiskName,
   dataDisks,
   extensions,
   withDiagnosticsProfile,
   customData = ""
)
-%}
{
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "{{ apiVersion }}",
      "name": "{{ name }}",
      "location": "{{ location }}",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/',{{ storageAccountName }})]",
        "[concat('Microsoft.Network/networkInterfaces/',{{ nicName }})]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "{{ vmSize }}"
        },
        "osProfile": {
          "computerName": "{{ name }}",
          "adminUsername": "{{ adminUsername }}",
	  {% if withSSHKey != "false" %}
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "{{ sshKeyPath }}",
                  "keyData": "{{ sshKeyData }}"
                }
              ]
            }
          }
	  {% else %}
          "adminPassword": "{{ adminPassword }}"
	  {% endif %}
          {% if customData %}
          ,
          "customData" : "{{ customData }}"
          {% endif %}
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "{{ imagePublisher }}",
            "offer": "{{ imageOffer }}",
            "sku": "{{ OSVersion }}",
            "version": "{{ version }}"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat('http://',{{ storageAccountName }},'.blob.core.windows.net/',{{  vmStorageAccountContainerName }},'/',{{ OSDiskName }},'.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
	  {% if dataDisks %}
	  ,
          "dataDisks": {{ dataDisks }}
	  {% endif %}
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',{{ nicName }})]"
            }
          ]
        }
	{% if withDiagnosticsProfile == "true" %}
	,
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat('http://',{{ storageAccountName }},'.blob.core.windows.net')]"
          }
        }
	{% endif %}
      }
      {% if extensions %}
      ,
      "resources" : {{ extensions }}
      {% endif %}
}
{%- endmacro %}

{#
   macro: from_vars
   Create a new *virtual machine* from variables.

   Parameters:

      name - string
      apiVersion - string
      location - string
      storageAccountName - string
      vmStorageAccountContainerName - string
      nicName - string
      vmSize - string
      adminUsername - string
      adminPassword - string
      withSSHKey - string
      sshKeyData - string
      sshKeyPath - string
      imagePublisher - string
      imageOffer - string
      OSVersion - string
      version - string
      OSDiskName - string
      withDataDisk - string
      sizeOfDiskInGB - string
      dataDisk1VhdName - string
      extension - object
      withDiagnosticsProfile - string

Example:
(start code)
{% import 'azure-jinja2/macros/virtual_machine.json.j2' as virtual_machine %}

{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "variables": {
    ...
  },
  "resources" : [
    ...,
    {{ virtual_machine.from_vars() }}
  ]
}

#}

{% macro from_vars(
      name                          = "[variables('vmName')]",
      apiVersion                    = "[variables('apiVersion')]",
      location                      = "[variables('location')]",
      storageAccountName            = "variables('storageAccountName')",
      vmStorageAccountContainerName = "variables('vmStorageAccountContainerName')",
      nicName                       = "variables('nicName')",
      vmSize                        = "[variables('vmSize')]",
      adminUsername                 = "[variables('adminUsername')]",
      adminPassword                 = "[variables('adminPassword')]",
      withSSHKey                    = "false",
      sshKeyData                    = "[variables('sshKeyData')]",
      sshKeyPath                    = "[variables('sshKeyPath')]",
      imagePublisher                = "[variables('imagePublisher')]",
      imageOffer                    = "[variables('imageOffer')]",
      OSVersion                     = "[variables('OSVersion')]",
      version                       = "latest",
      OSDiskName                    = "variables('OSDiskName')",
      withDataDisk                  = "true",
      sizeOfDiskInGB                = "[variables('sizeOfDiskInGB')]",
      dataDisk1VhdName              = "variables('dataDisk1VhdName')",
      extension                     = "",
      withDiagnosticsProfile        = "true"
)
-%}
{% if withDataDisk == "true" %}
{% import 'azure-jinja2/macros/virtual_machine_data_disk.json.j2' as vm_data_disk %}

{% set _storageAccountName %}{{ storageAccountName }}{% endset %}
{% set _vmStorageAccountContainerName %}{{ vmStorageAccountContainerName }}{% endset %}
{% set _sizeOfDiskInGB %}{{ sizeOfDiskInGB }}{% endset %}
{% set _dataDisk1VhdName %}{{ dataDisk1VhdName }}{% endset %}

{% set _dataDisks %}
[
   {{ vm_data_disk.create(
         name = "datadisk1",
         storageAccountName = _storageAccountName,
         vmStorageAccountContainerName = _vmStorageAccountContainerName,
         sizeOfDiskInGB = _sizeOfDiskInGB,
         dataDiskVhdName = _dataDisk1VhdName
      )
   }}
]
{% endset %}
{% else %}
{% set _dataDisks %}{% endset %}
{% endif %}
{% if extension %}
{% set _extensions %}
[
   {{ extension }}
]
{% endset %}
{% else %}
{% set _extensions %}{% endset %}
{% endif %}

{{ create(
      name                          = name,
      apiVersion                    = apiVersion,
      location                      = location,
      storageAccountName            = storageAccountName,
      vmStorageAccountContainerName = vmStorageAccountContainerName,
      nicName                       = nicName,
      vmSize                        = vmSize,
      adminUsername                 = adminUsername,
      adminPassword                 = adminPassword,
      withSSHKey                     = withSSHKey,
      sshKeyData                    = sshKeyData,
      sshKeyPath                    = sshKeyPath,
      imagePublisher                = imagePublisher,
      imageOffer                    = imageOffer,
      OSVersion                     = OSVersion,
      version                       = version,
      OSDiskName                    = OSDiskName,
      dataDisks                     = _dataDisks,
      extensions                    = _extensions,
      withDiagnosticsProfile        = withDiagnosticsProfile
   )
}}
{%- endmacro %}
