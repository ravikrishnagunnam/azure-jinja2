{#
   package: virtual_network_gateway
   source: https://github.com/sebbrochet/azure-jinja2/blob/master/macros/virtual_network_gateway.json.j2

   macro: create
   Create a new *virtual network gateway*.
   
   A virtual network gateway requires a *virtual network* and a *public IP address* to be created.

   Parameters:

      name - string
      apiVersion - string
      location - string
      publicIPAddressName - string, name of an existing *public IP address* to bind the gateway on (see <public_ip_address>)
      virtualNetworkName - string, name of an existing *virtual network* to create the gateway on (see <virtual_network>)
      gatewaySubnetRef - string,
      gatewaySku - string, *"Basic"* or *"Standard"* or *"HighPerformance"*
      vpnClientAddressPoolPrefix - string, VPN client mask in CIDR notation (ex: "172.16.201.0/24")
      clientRootCertName - string, name to associate to the *Root client certificate* described by ClientRootCertData parameter
      clientRootCertData - string, BASE64-encoded version of the Root client certificate 
      revokedCertName - string, name to associate to the *revoked certificate thumbprint* described by the *revokedCertThumbprint* parameter
      revokedCertThumbprint - string, thumbprint of the revoked certificate

   Example:
(start code)
{% import 'azure-jinja2/macros/virtual_network.json.j2' as virtual_network %}

{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "resources" : [
    {{ virtual_network.create(
         name = "myVNET",
         apiVersion = "2015-06-15",
         location = "West Europe",
         addressPrefix = "10.0.0.0/16",
         subnetName = "mySubnet",
         subnetPrefix = "10.0.0.0/24"
       )
    }}
  ]
}

(end)


#}

{% macro create(
     name,
     apiVersion,
     location,
     publicIPAddressName,
     virtualNetworkName,
     gatewaySubnetRef,
     gatewaySku,
     vpnClientAddressPoolPrefix,
     clientRootCertName,
     clientRootCertData,
     revokedCertName,
     revokedCertThumbprint
   )
-%}
{  
   "type": "Microsoft.Network/virtualNetworkGateways",
   "name": "{{ name }}",
   "apiVersion": "{{ apiVersion }}",
   "location": "{{ location }}",
   "dependsOn": [  
      "[concat('Microsoft.Network/publicIPAddresses/',{{ publicIPAddressName }})]",
      "[concat('Microsoft.Network/virtualNetworks/',{{ virtualNetworkName }})]"
   ],
   "properties": {  
      "ipConfigurations": [  
         {  
            "properties": {  
               "privateIPAllocationMethod": "Dynamic",
               "subnet": {  
	          "id": "{{ gatewaySubnetRef }}"
               },
               "publicIPAddress": {  
	          "id": "[resourceId('Microsoft.Network/publicIPAddresses',{{ publicIPAddressName }})]"
               }
            },
            "name": "vnetGatewayConfig"
         }
      ],
      "sku": {
         "name": "{{ gatewaySku }}",
         "tier": "{{ gatewaySku }}"
      },            
      "gatewayType": "Vpn",
      "vpnType": "RouteBased",
      "enableBgp": "false",
      "vpnClientConfiguration": {  
         "vpnClientAddressPool": {  
            "addressPrefixes": [  
	       "{{ vpnClientAddressPoolPrefix }}"
            ]
         },
         "vpnClientRootCertificates": [  
            {  
	       "name": "{{ clientRootCertName }}",
               "properties":{
	          "PublicCertData": "{{ clientRootCertData }}"
               }
            }
         ],
         "vpnClientRevokedCertificates":[  
            {  
	       "name": "{{ revokedCertName }}",
               "properties":{  
	          "Thumbprint": "{{ revokedCertThumbprint }}"
               }
            }
         ]
      }
   }
}
{%- endmacro %}

{#
   macro: from_vars
   Create a new *virtual network gateway* from JSON variables.

   Parameters:

      name - string = "[variables('gatewayName')]"
      apiVersion - stringi = "[variables('apiVersion')]"
      location - string = "[variables('location')]"
      publicIPAddressName - string = "variables('publicIPAddressName')", name of an existing *public IP address* to bind the gateway on (see <public_ip_address>)
      virtualNetworkName - string = "variables('virtualNetworkName')", name of an existing *virtual network* to create the gateway on (see <virtual_network>)
      gatewaySubnetRef - string = "[variables('gatewaySubnetRef')]",
      gatewaySku - string = "[variables('gatewaySku')]", *"Basic"* or *"Standard"* or *"HighPerformance"*
      vpnClientAddressPoolPrefix - string = "[variables('vpnClientAddressPoolPrefix')]", VPN client mask in CIDR notation (ex: "172.16.201.0/24")
      clientRootCertName - string = "[variables('clientRootCertName')]", name to associate to the *Root client certificate* described by ClientRootCertData parameter
      clientRootCertData - string = "[variables('clientRootCertData')]", BASE64-encoded version of the Root client certificate
      revokedCertName - string = "[variables('revokedCertName')]", name to associate to the *revoked certificate thumbprint* described by the *revokedCertThumbprint* parameter
      revokedCertThumbprint - string = "[variables('revokedCertThumbprint')]", thumbprint of the revoked certificate

   Example:
(start code)

{% import 'azure-jinja2/macros/virtual_network.json.j2' as virtual_network %}
{% import 'azure-jinja2/macros/public_ip_address.json.j2' as public_ip_address %}
{% import 'azure-jinja2/macros/virtual_network_gateway.json.j2' as virtual_network_gateways %}

"resources" : [
    {{ virtual_network.from_vars() }}
    ,
    {{ public_ip_address.from_vars() }}
    ,
    {{ virtual_network_gateways.from_vars() }}
]

(end)

#}

{% macro from_vars(
     name                       = "[variables('gatewayName')]",
     apiVersion                 = "[variables('apiVersion')]",
     location                   = "[variables('location')]",
     publicIPAddressName        = "variables('publicIPAddressName')",
     virtualNetworkName         = "variables('virtualNetworkName')",
     gatewaySubnetRef           = "[variables('gatewaySubnetRef')]",
     gatewaySku                 = "[variables('gatewaySku')]",
     vpnClientAddressPoolPrefix = "[variables('vpnClientAddressPoolPrefix')]",
     clientRootCertName         = "[variables('clientRootCertName')]",
     clientRootCertData         = "[variables('clientRootCertData')]",
     revokedCertName            = "[variables('revokedCertName')]",
     revokedCertThumbprint      = "[variables('revokedCertThumbprint')]"
   )
-%}
{{
   create(
     name = name,
     apiVersion = apiVersion,
     location = location,
     publicIPAddressName = publicIPAddressName,
     virtualNetworkName = virtualNetworkName,
     gatewaySubnetRef = gatewaySubnetRef,
     gatewaySku = gatewaySku,
     vpnClientAddressPoolPrefix = vpnClientAddressPoolPrefix,
     clientRootCertName = clientRootCertName,
     clientRootCertData = clientRootCertData,
     revokedCertName = revokedCertName,
     revokedCertThumbprint = revokedCertThumbprint
   )
}}
{%- endmacro %}
